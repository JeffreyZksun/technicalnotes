
= Destructor & Finalize =

If the constructor isn’t explicitly defined, the compiler will generate a default one. 

If the destructor isn’t explicitly defined, compiler will *NOT* generate it implicitly. The Finalize function can’t be overridden explicitly. It is always generated by the compiler. When a class contains a destructor, the Finalize is generated automatically and an entry is created in the Finalize queue. So empty destructors should not be used. The destructor implicitly calls Finalize on the base class of the object. The destructor is equivalent to the code below. {{{[1]}}}

Remember that executing a Finalize method is costly to performance.

{{{
protected override void Finalize()
{
    try
    {
        // Cleanup statements...
    }
    finally
    {
        base.Finalize();
    }
} 
}}}


 = Reference =
{{{[1]}}} http://msdn.microsoft.com/en-us/library/66x5fx1b%28v=vs.110%29.aspx